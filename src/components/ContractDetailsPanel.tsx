// /Users/m/Documents/wfm/competitor/naumen/employee-management/src/components/ContractDetailsPanel.tsx

import React, { useState } from 'react';
import { Employee } from '../types/employee';

// ========================
// CONTRACT DETAILS PANEL - Employment contract management
// Comprehensive contract information display and document management
// ========================

interface ContractDetailsPanelProps {
  employee: Employee;
  onUpdate?: (contractData: ContractData) => void;
  onDocumentUpload?: (file: File, type: string) => void;
  onDocumentDelete?: (documentId: string) => void;
  editable?: boolean;
}

interface ContractData {
  contractNumber: string;
  contractType: 'full-time' | 'part-time' | 'contractor' | 'temporary';
  startDate: Date;
  endDate?: Date;
  probationPeriod?: number; // months
  salary: {
    amount: number;
    currency: string;
    paymentSchedule: 'monthly' | 'weekly' | 'hourly';
  };
  workingHours: {
    hoursPerWeek: number;
    schedule: string;
    overtime: boolean;
  };
  benefits: string[];
  documents: ContractDocument[];
  renewalTerms?: string;
  terminationNotice: number; // days
}

interface ContractDocument {
  id: string;
  name: string;
  type: 'contract' | 'amendment' | 'policy' | 'certificate' | 'other';
  uploadDate: Date;
  size: number;
  url: string;
  signed: boolean;
}

const ContractDetailsPanel: React.FC<ContractDetailsPanelProps> = ({
  employee,
  onUpdate,
  onDocumentUpload,
  onDocumentDelete,
  editable = false
}) => {
  const [isEditing, setIsEditing] = useState(false);
  const [showDocumentUpload, setShowDocumentUpload] = useState(false);
  
  // Mock contract data
  const [contractData, setContractData] = useState<ContractData>({
    contractNumber: `CON-${employee.employeeId}-2024`,
    contractType: employee.workInfo.contractType,
    startDate: employee.workInfo.hireDate,
    probationPeriod: 3,
    salary: {
      amount: employee.workInfo.salary || 50000,
      currency: 'KGS',
      paymentSchedule: 'monthly'
    },
    workingHours: {
      hoursPerWeek: 40,
      schedule: '–ü–Ω-–ü—Ç 9:00-18:00',
      overtime: true
    },
    benefits: [
      '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞',
      '–û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫ 24 –¥–Ω—è',
      '–û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ',
      '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–æ–µ–∑–¥–∞'
    ],
    documents: [
      {
        id: 'doc1',
        name: '–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä',
        type: 'contract',
        uploadDate: employee.workInfo.hireDate,
        size: 245760,
        url: '#',
        signed: true
      },
      {
        id: 'doc2',
        name: '–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
        type: 'policy',
        uploadDate: employee.workInfo.hireDate,
        size: 156800,
        url: '#',
        signed: true
      }
    ],
    terminationNotice: 14
  });

  const getContractTypeLabel = (type: ContractData['contractType']): string => {
    const labels = {
      'full-time': '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      'part-time': '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      'contractor': '–ü–æ–¥—Ä—è–¥—á–∏–∫',
      'temporary': '–í—Ä–µ–º–µ–Ω–Ω—ã–π'
    };
    return labels[type];
  };

  const getDocumentTypeIcon = (type: ContractDocument['type']): string => {
    const icons = {
      contract: 'üìÑ',
      amendment: 'üìù',
      policy: 'üìã',
      certificate: 'üèÜ',
      other: 'üìé'
    };
    return icons[type];
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const DocumentUploadModal: React.FC = () => {
    const [dragOver, setDragOver] = useState(false);
    const [selectedFile, setSelectedFile] = useState<File | null>(null);
    const [documentType, setDocumentType] = useState<ContractDocument['type']>('other');

    if (!showDocumentUpload) return null;

    const handleFileSelect = (file: File) => {
      setSelectedFile(file);
    };

    const handleUpload = () => {
      if (selectedFile) {
        onDocumentUpload?.(selectedFile, documentType);
        setShowDocumentUpload(false);
        setSelectedFile(null);
      }
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-xl max-w-md w-full shadow-2xl">
          <div className="border-b border-gray-200 p-6">
            <h3 className="text-xl font-bold text-gray-900">–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</h3>
          </div>
          
          <div className="p-6 space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞</label>
              <select
                value={documentType}
                onChange={(e) => setDocumentType(e.target.value as ContractDocument['type'])}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="contract">–î–æ–≥–æ–≤–æ—Ä</option>
                <option value="amendment">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</option>
                <option value="policy">–ü–æ–ª–∏—Ç–∏–∫–∞/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</option>
                <option value="certificate">–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</option>
                <option value="other">–î—Ä—É–≥–æ–µ</option>
              </select>
            </div>

            <div
              className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                dragOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300'
              }`}
              onDragOver={(e) => {
                e.preventDefault();
                setDragOver(true);
              }}
              onDragLeave={() => setDragOver(false)}
              onDrop={(e) => {
                e.preventDefault();
                setDragOver(false);
                const files = Array.from(e.dataTransfer.files);
                if (files[0]) handleFileSelect(files[0]);
              }}
            >
              {selectedFile ? (
                <div>
                  <div className="text-4xl text-green-500 mb-2">üìÑ</div>
                  <p className="font-medium text-gray-900">{selectedFile.name}</p>
                  <p className="text-sm text-gray-600">{formatFileSize(selectedFile.size)}</p>
                  <button
                    onClick={() => setSelectedFile(null)}
                    className="mt-2 text-sm text-red-600 hover:text-red-800"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              ) : (
                <>
                  <div className="text-4xl text-gray-400 mb-4">üìÅ</div>
                  <p className="text-lg font-medium text-gray-900 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</p>
                  <p className="text-sm text-gray-600 mb-4">–∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞</p>
                  <input
                    type="file"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) handleFileSelect(file);
                    }}
                    className="hidden"
                    id="file-upload"
                    accept=".pdf,.doc,.docx,.jpg,.png"
                  />
                  <label
                    htmlFor="file-upload"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 cursor-pointer"
                  >
                    –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
                  </label>
                </>
              )}
            </div>
          </div>

          <div className="border-t border-gray-200 p-6 flex justify-end gap-3">
            <button
              onClick={() => {
                setShowDocumentUpload(false);
                setSelectedFile(null);
              }}
              className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              onClick={handleUpload}
              disabled={!selectedFile}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
            >
              –ó–∞–≥—Ä—É–∑–∏—Ç—å
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200">
      {/* Header */}
      <div className="border-b border-gray-200 p-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-xl font-bold text-gray-900">–î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</h2>
            <p className="text-gray-600">
              {employee.personalInfo.firstName} {employee.personalInfo.lastName} - {employee.employeeId}
            </p>
          </div>
          
          {editable && (
            <div className="flex gap-2">
              <button
                onClick={() => setIsEditing(!isEditing)}
                className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                {isEditing ? '–û—Ç–º–µ–Ω–∞' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
              </button>
              {isEditing && (
                <button
                  onClick={() => {
                    onUpdate?.(contractData);
                    setIsEditing(false);
                  }}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Content */}
      <div className="p-6">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Basic Contract Info */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-2">
              –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </h3>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞</label>
                {isEditing ? (
                  <input
                    type="text"
                    value={contractData.contractNumber}
                    onChange={(e) => setContractData(prev => ({ ...prev, contractNumber: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  />
                ) : (
                  <p className="text-gray-900 font-mono">{contractData.contractNumber}</p>
                )}
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞</label>
                {isEditing ? (
                  <select
                    value={contractData.contractType}
                    onChange={(e) => setContractData(prev => ({ ...prev, contractType: e.target.value as any }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="full-time">–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å</option>
                    <option value="part-time">–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å</option>
                    <option value="contractor">–ü–æ–¥—Ä—è–¥—á–∏–∫</option>
                    <option value="temporary">–í—Ä–µ–º–µ–Ω–Ω—ã–π</option>
                  </select>
                ) : (
                  <p className="text-gray-900">{getContractTypeLabel(contractData.contractType)}</p>
                )}
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
                <p className="text-gray-900">{contractData.startDate.toLocaleDateString()}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫</label>
                <p className="text-gray-900">{contractData.probationPeriod} –º–µ—Å—è—Ü–µ–≤</p>
              </div>
            </div>

            {/* Salary Info */}
            <div className="border-t border-gray-200 pt-4">
              <h4 className="font-medium text-gray-900 mb-3">–û–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞</h4>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">–û–∫–ª–∞–¥</label>
                  <p className="text-gray-900 font-semibold">
                    {contractData.salary.amount.toLocaleString()} {contractData.salary.currency}
                  </p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å</label>
                  <p className="text-gray-900">
                    {contractData.salary.paymentSchedule === 'monthly' ? '–ï–∂–µ–º–µ—Å—è—á–Ω–æ' :
                     contractData.salary.paymentSchedule === 'weekly' ? '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ' : '–ü–æ—á–∞—Å–æ–≤–∞—è'}
                  </p>
                </div>
              </div>
            </div>

            {/* Working Hours */}
            <div className="border-t border-gray-200 pt-4">
              <h4 className="font-medium text-gray-900 mb-3">–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è</h4>
              <div className="space-y-2">
                <div>
                  <label className="block text-sm font-medium text-gray-700">–ß–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é</label>
                  <p className="text-gray-900">{contractData.workingHours.hoursPerWeek}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">–ì—Ä–∞—Ñ–∏–∫</label>
                  <p className="text-gray-900">{contractData.workingHours.schedule}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">–°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ</label>
                  <p className="text-gray-900">{contractData.workingHours.overtime ? '–†–∞–∑—Ä–µ—à–µ–Ω—ã' : '–ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Benefits and Documents */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-2">
              –õ—å–≥–æ—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            </h3>
            
            {/* Benefits */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">–õ—å–≥–æ—Ç—ã –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏</h4>
              <div className="space-y-2">
                {contractData.benefits.map((benefit, index) => (
                  <div key={index} className="flex items-center gap-2">
                    <span className="text-green-500">‚úì</span>
                    <span className="text-gray-700">{benefit}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Documents */}
            <div className="border-t border-gray-200 pt-4">
              <div className="flex items-center justify-between mb-3">
                <h4 className="font-medium text-gray-900">–î–æ–∫—É–º–µ–Ω—Ç—ã</h4>
                {editable && (
                  <button
                    onClick={() => setShowDocumentUpload(true)}
                    className="px-3 py-1 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700"
                  >
                    –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                )}
              </div>
              
              <div className="space-y-3">
                {contractData.documents.map(document => (
                  <div key={document.id} className="border border-gray-200 rounded-lg p-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <span className="text-2xl">{getDocumentTypeIcon(document.type)}</span>
                        <div>
                          <h5 className="font-medium text-gray-900">{document.name}</h5>
                          <p className="text-sm text-gray-600">
                            {formatFileSize(document.size)} ‚Ä¢ {document.uploadDate.toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        {document.signed && (
                          <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded">
                            –ü–æ–¥–ø–∏—Å–∞–Ω
                          </span>
                        )}
                        <button className="p-1 text-gray-400 hover:text-gray-600">
                          üì•
                        </button>
                        {editable && (
                          <button
                            onClick={() => onDocumentDelete?.(document.id)}
                            className="p-1 text-gray-400 hover:text-red-600"
                          >
                            üóëÔ∏è
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Contract Terms */}
            <div className="border-t border-gray-200 pt-4">
              <h4 className="font-medium text-gray-900 mb-3">–£—Å–ª–æ–≤–∏—è —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è</h4>
              <div>
                <label className="block text-sm font-medium text-gray-700">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏</label>
                <p className="text-gray-900">{contractData.terminationNotice} –¥–Ω–µ–π</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Document Upload Modal */}
      <DocumentUploadModal />
    </div>
  );
};

export default ContractDetailsPanel;